@page "/day/{id:int}"
@implements IAsyncDisposable
@inject NavigationManager Nav

@if (day is null)
{
    <p>Loading‚Ä¶</p>
}
else
{
    <h2>@day.Date.ToDateTime(TimeOnly.MinValue).ToString("dd.MM dddd", Bg)</h2>

    <p><a href="/events">‚Ü™ –°—ä–±–∏—Ç–∏—è</a> | @day.Event.Name</p>

    <div class="mb-2 d-flex gap-3 flex-wrap align-items-center">
        <select @bind="productId" @bind:after="OnProductChanged" class="form-select" style="width: 16.5rem">
            <option value="">–ü—Ä–æ–¥—É–∫—Ç‚Ä¶</option>
            @foreach (var p in products)
            {
                <option value="@p.ProductId">@p.Name</option>
            }
        </select>

        @if (selectedProduct?.Brand == Brand.Ceramics)
        {
            <!-- Use text + inputmode = decimal to reliably show decimal keypad on mobile (iOS/Android) -->
            <input type="text" inputmode="decimal" enterkeyhint="done" autocomplete="off"
                   placeholder="–¶–µ–Ω–∞‚Ä¶" class="form-control" style="width: 10rem"
                   @bind="priceText" @bind:event="oninput" @bind:after="ClearValidationMessage" />
        }
        else
        {
            <select @bind="price" @bind:after="OnPriceChanged" class="form-select" style="width: 8rem">
                <option value="">–¶–µ–Ω–∞‚Ä¶</option>
                @foreach (var r in priceOptions)
                {
                    <option value="@r.Price">@r.Price</option>
                }
            </select>
        }

        <!-- Discount input -->
        <input type="text" inputmode="decimal" enterkeyhint="done" autocomplete="off"
               placeholder="–û—Ç—Å—Ç—ä–ø–∫–∞‚Ä¶" class="form-control" style="width: 8rem"
               @bind="discountText" @bind:event="oninput" @bind:after="ClearValidationMessage" />

        <!-- Note input -->
        <input type="text" inputmode="text" enterkeyhint="done" autocomplete="off"
               placeholder="–ë–µ–ª–µ–∂–∫–∞‚Ä¶" class="form-control" style="width: 8rem"
               @bind="note" @bind:event="oninput" />

        <button class="btn btn-primary" style="width: 8rem; height: 2.75rem" @onclick="Add" disabled="@DisableAddButton">–î–æ–±–∞–≤–∏</button>
    </div>

    @if (!string.IsNullOrEmpty(validationMessage))
    {
        <div class="alert alert-warning py-2 px-3 mb-3">
            @validationMessage
        </div>
    }

    @foreach (var summary in brandSummaries)
    {
        <h4 class="mt-4">@summary.Brand.GetDisplayName()</h4>
        <table class="table table-striped align-middle">
            <thead class="table-warning">
                <tr>
                    <th class="px-3">–ß–∞—Å</th>
                    <th class="px-3">–ü—Ä–æ–¥—É–∫—Ç</th>
                    <th class="px-3">–±—Ä.</th>
                    <th class="px-3">–¶–µ–Ω–∞</th>
                    <th class="px-3">–û—Ç—Å—Ç.</th>
                    <th class="px-3">–ë–µ–ª–µ–∂–∫–∞</th>
                    <th class="px-3">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var s in summary.Sales)
                {
                    <tr>
                        <td class="px-3">@TimeZoneInfo.ConvertTimeFromUtc(s.CreatedUtc, SofiaTimeZone).ToString("HH:mm", Bg)</td>
                        <td class="px-3">@s.Product.Name</td>
                        <td class="px-3">@s.QuantityUnits</td>
                        <td class="px-3">@s.Price.ToString("0.00")</td>
                        <td class="px-3">@s.DiscountValue.ToString("0.00")</td>
                        <td class="px-3">@s.Notes</td>
                        <td class="px-3 text-end">
                            <div class="btn-group" role="group">
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => EditSale(s.SaleId)">Edit</button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteSale(s.SaleId)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td class="px-3 fw-bold" colspan="2">–û–±—â–æ @summary.Brand.GetDisplayName():</td>
                    <td class="px-3 fw-bold">@summary.TotalQuantityUnits.ToString("0")</td>
                    <td class="px-3 fw-bold">@summary.NetTotal.ToString("0.00")</td>
                    <td class="px-3 fw-bold">@summary.TotalDiscount.ToString("0.00")</td>
                </tr>
            </tfoot>
        </table>
    }
}

@code {
    [Parameter] public int id { get; set; }
    MySalesTracker.Data.Models.EventDay? day;
    List<Product> products = new();
    List<PriceRule> priceOptions = new();
    List<BrandSalesSummary> brandSummaries = new();
    HubConnection? hubConnection;

    // Order of brand tables
    Brand[] brandOrder = new[] { Brand.Totem, Brand.Ceramics, Brand.Candles };

    int? productId;
    decimal? price;
    string? priceText;    // manual price input (ceramics)
    string? discountText; // manual discount input (all brands)
    string? note;
    int qty = 1;
    string? validationMessage;

    // Bulgarian culture for date/time formatting
    static readonly CultureInfo Bg = CultureInfo.GetCultureInfo("bg-BG");

    bool DisableAddButton => !string.IsNullOrEmpty(validationMessage);

    
    // Sofia timezone for consistent time display
    static readonly TimeZoneInfo SofiaTimeZone = TimeZoneInfo.FindSystemTimeZoneById("FLE Standard Time"); // Sofia timezone

    Product? selectedProduct => products.FirstOrDefault(p => p.ProductId == productId);

    protected override async Task OnInitializedAsync()
    {
        day = await EventSvc.GetEventDayByIdAsync(id);
        if (day == null)
        {
            // EventDay not found - the loading message will remain visible            
            return;
        }

        products = await ProductSvc.GetActiveProductsAsync();

        await ReloadSalesAsync();
        await EnsureHubConnectionAsync();
    }

    async Task OnProductChanged()
    {
        if (selectedProduct?.Brand == Brand.Ceramics)
        {
            priceOptions.Clear();
            price = null; priceText = null; // force manual entry
            qty = 1;                        // no rules => default 1
        }
        else
        {
            priceOptions = productId is null
                ? new()
                : await ProductSvc.GetPriceRulesForProductAsync(productId.Value);
            price = null; priceText = null; qty = 1;
        }

        ClearValidationMessage();
        StateHasChanged();
    }

    async Task Add()
    {
        if (day is null) return;
        if (productId is null)
        {
            validationMessage = "–ü–æ—Å–æ—á–∏ –∫–∞–∫–≤–æ –ø—Ä–æ–¥–∞–≤–∞—à, –Ω–∞ –≤—Ä–∞—á–∫–∞ –ª–∏ —â–µ —Ö–æ–¥–∏—à –ø–æ—Å–ª–µ?";
            return;
        }

        ClearValidationMessage();

        // Ensure price is set (parse string for ceramics)
        if (selectedProduct?.Brand == Brand.Ceramics)
        {
            if (!TryParseDecimal(priceText, out var parsedPrice))
            {
                validationMessage = $"–í—ä–≤–µ–¥–∏ —Ü–µ–Ω–∞ –∫–∞–¢ –Ω–æ—Ä–º–∞–ª–µ–Ω —á–æ–≤–µ–∫, (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.50), –∫–∞–∫–≤–æ –µ —Ç–æ–≤–∞ {priceText}??";
                return;
            }

            price = parsedPrice;
        }

        if (price is null)
        {
            validationMessage = "–í—ä–≤–µ–¥–µ—Ç–µ —Ü–µ–Ω–∞ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤–ï, –±–µ–∑ –ø–∞—Ä–∏ –ª–∏ –≥–æ –¥–∞–≤–∞—à üëÄ?";
            return;
        }

        var discount = 0m;
        if (!string.IsNullOrWhiteSpace(discountText))
        {
            if (!TryParseDecimal(discountText, out var parsedDiscount))
            {
                validationMessage = "–¢–∞—è –æ—Ç—Å—Ç—ä–ø–∫–∞ –Ω–µ —Ç—Ä—è–±–≤–∞ –ª–∏ –¥–∞ –µ –≤ –ª–≤.? –ò–ª–∏ —â–µ –º—É –¥–∞–≤–∞—à –Ω–µ—â–æ –¥—Ä—É–≥–æ?";
                return;
            }

            discount = parsedDiscount;
        }

        if(discount > price)
        {
            validationMessage = "–ö–æ –Ω–∞–ø—Ä–∞–π –≤–ï –º–∞–Ω–Ø–∫? –û—Ç—Å—Ç—ä–ø–∫–∞—Ç–∞ —Ç–∏ –µ –ø–æ-–≥–æ–ª—è–º–∞ –æ—Ç —Ü–µ–Ω–∞—Ç–∞, –¥–∞ –Ω–µ –∏–º –¥–∞–≤–∞—à —Ç–∏ –ø–∞—Ä–∏ —Å–∞–º–æ –∏ —Å–∞–º–æ –¥–∞ –≥–æ –≤–∑–µ–º–∞—Ç?";
            return;
        }

        var unitsPerSale = await PriceRuleSvc.GetUnitsForProductAsync(productId.Value, price.Value, day.Date);

        var newSale = await SaleSvc.CreateSaleAsync(
            day.EventDayId,
            productId.Value,
            unitsPerSale.priceRuleId,
            price.Value,
            unitsPerSale.units,
            discount,
            note);

        await ReloadSalesAsync();

        // Reset quick inputs but keep current product selection
        price = null; priceText = null; discountText = null; note = null; qty = 1;
        await OnProductChanged(); // repopulate priceOptions for the currently selected product
    }

    private async Task OnPriceChanged()
    {
        if (productId is null || day is null) return;

        if (selectedProduct?.Brand == Brand.Ceramics)
        {
            // Parse typed price using current culture
            price = TryParseDecimal(priceText, out var parsed)
                ? parsed
                : null;
            qty = 1;
        }
        else if (price is not null)
        {
            var unitsPerSale = await PriceRuleSvc.GetUnitsForProductAsync(productId.Value, price.Value, day.Date);
            qty = unitsPerSale.units;
        }

        ClearValidationMessage();

        StateHasChanged();
    }

    void ClearValidationMessage()
    {
        validationMessage = null;
    }

    static bool TryParseDecimal(string? value, out decimal result)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            result = 0;
            return false;
        }

        // trust the intended Bulgarian formatting first
        if (decimal.TryParse(value.Replace(" ", string.Empty), NumberStyles.Number, Bg, out result))
        {
            return true;
        }

        // then try a custom normalization as a rescue path
        var normalized = value.Replace(" ", string.Empty).Replace(',', '.');
        return decimal.TryParse(normalized, NumberStyles.Number, CultureInfo.InvariantCulture, out result);
    }

    async Task ReloadSalesAsync()
    {
        brandSummaries = await SaleSvc.GetBrandSalesSummariesAsync(id);
    }

    async Task EnsureHubConnectionAsync()
    {
        if (hubConnection is not null) return;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri(SalesHub.HubPath))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<int, int>("SaleCreated", async (eventDayId, saleId) =>
        {
            if (day is null || eventDayId != day.EventDayId) return;
            await InvokeAsync(async () =>
            {
                await ReloadSalesAsync();
                StateHasChanged();
            });
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinDayGroup", id);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is null) return;
        try
        {
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.InvokeAsync("LeaveDayGroup", id);
            }
            await hubConnection.DisposeAsync();
        }
        catch
        {
            // Swallow to avoid throwing during circuit disposal.
        }
    }

    private void EditSale(int saleId)
    {
        // TODO: Implement edit functionality
        // This could open a modal or navigate to an edit page
    }

    private void DeleteSale(int saleId)
    {
        // TODO: Implement delete functionality
        // This could show a confirmation dialog and then delete the sale
    }
}
