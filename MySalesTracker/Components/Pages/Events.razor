@page "/events"

<h2>Събития</h2>

<div class="mb-3 d-flex gap-3 flex-wrap align-items-center">
    <input @bind="name" class="form-control" style="width: 19rem; height: 2.5rem" placeholder="Име" />
</div>
<div class="mb-3 d-flex gap-3 flex-wrap align-items-center">
    <input type="date" class="form-control" style="width: 9rem; height: 2.75rem" @bind="start" />
    <input type="date" class="form-control" style="width: 9rem; height: 2.75rem" @bind="end" />
</div>
<div class="mb-3 d-flex gap-3 flex-wrap align-items-center">
    <button class="btn btn-primary" style="width: 19rem; height: 2.75rem" @onclick="Create">Създай</button>
</div>

<ul>
    @foreach (var b in events)
    {
        <li>
            <b>@b.Name</b> (@b.StartDate → @b.EndDate)
            <ul>
                @foreach (var d in b.Days.OrderBy(x => x.Date))
                {
                    <li><a href="@($"/day/{d.EventDayId}")">@d.Date</a></li>
                }
            </ul>
        </li>
    }
</ul>

@code {
    string name = $"Базар {DateOnly.FromDateTime(DateTime.Today)}";
    DateOnly start = DateOnly.FromDateTime(DateTime.Today);
    DateOnly end = DateOnly.FromDateTime(DateTime.Today);
    List<MySalesTracker.Data.Models.Event> events = new();

    protected override async Task OnInitializedAsync()
        => events = await EventSvc.GetAllEventsAsync();

    async Task Create()
    {
        if (end < start) end = start;

        var newEvent = await EventSvc.CreateEventAsync(name, start, end);
        events.Insert(0, newEvent); // Add to top of list

        /*TODO: @IvayloK - replace the lines above if you need to reload all the events and keep the data updated on all the devices
        in cases where other users might have created events simultaneously*/
        //await EventSvc.CreateEventAsync(name, start, end);
        //events = await EventSvc.GetAllEventsAsync(); // Reload all events
        
        // Reset form
        name = $"Базар {DateOnly.FromDateTime(DateTime.Today)}";
        start = DateOnly.FromDateTime(DateTime.Today);
        end = DateOnly.FromDateTime(DateTime.Today);
    }
}
